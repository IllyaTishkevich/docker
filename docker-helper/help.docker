1: Развернуть демо чистой magento
   Tools -> Deploy Demo - запускает демо , нужно выбрать версию
                          Запускать в отдельном проекте, сотрет имеющиеся данные!

2: Развернуть готовый проект из исходников и дампа бд
   1- скопировать исходники (или клонировать с гит) в каталог compose/src,
      скопировать дамп в compose/sql/src
   2- Tools -> Docker Run - тут предложит выбрать версию magento подождать конца установки
   3- Tools -> DB Utils -> Database Deploy - развернуть дамп
   4- Tools -> DB Utils -> Set base url - установить base domain
   5- Tools -> DB Utils -> Set XDebug IP -установить ip для xdebug
   6- Tools -> Docker Rebuild - для обновления конфигурации окружения.


Описание пунктов меню

Tools -> Clear Env                        останавливает, а потом удаляет контейнеры docker в текущем проекте
Tools -> Deploy Demo                      распаковывает demo, проект с чистой копией magento, в диалоге можно выбрать требуемую версию. 
                                          Внимание! Стирает все уже развернутые ранее копии magento! 
Tools -> Docker Rebuild                   нужна для обновления окружения, нужно запускать, если что-то менялось в файлах докера, 
                                          а также для перезапуска сервисов
Tools -> Clear All                        стирает все! Возврат проекта docker к состоянию пустого - стирает бд и мадженто.
Tools -> Install Magento                  запускает установку magento, без этапа composer, 
                                          запускать, если есть vendor-каталог , но базы данных нету.
Tools -> Docker Run                       тут выбор версии magento, развертывание окружения docker, 
                                          нужно для смены версии php. 
                                          Внимание! выполнять осторожно, т.к. может возникнуть конфликт версий бд, если бд была кастомной, 
                                          например, в compose/docker-compose.yml указали maria, вместо mysql
Tools -> Stop All containers              останавливает все контейнеры в текщем проекте

Tools -> DB Utils -> Database Deploy      устанавливает базу данных из файла-дампа, дамп нужно выбрать в диалоге. может быть архив.
                                          Он может быть и в архиве gz, главное чтобы файл sql внутри был в корне архива.
Tools -> DB Utils -> Set Admin Password   создает/сбрасывает пароль администратора M2. Но иногда нужно знать email 
                                          (select * from admin_user;), в файле можно изменить данные на свои.
Tools -> DB Utils -> Set base url         устанавливает base_url magento, записывает также и в /etc/hosts, поэтому просит права root
Tools -> DB Utils -> Set XDebug IP        предоставляет выбор ip для использования xdebug в контейнере, прописывает его в compose/docker-compose.yml, 
                                          в XDEBUG_CONFIG remote_host , если файл еще не менялся - то в заменяет шаблон строки {place_you_ip} на ip. 
                                          Внимание! Если ip уже выбирался, то сменить можно только путем редактирования compose/docker-compose.yml. 
                                          Узнать ip можно командой ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'
Tools -> DB Utils -> Show base url        показать secure и unsecure base_url в текущей magento, а также путь в админку, 
                                          если magento уже развернута в контейнере
Docker -> Run -> Run command in php-fpm   позволяет запускать команды в контейнере phpfpm. 
                                          Примеры: ls -lh - покажет список файлов и каталогов в каталоге по-умолчанию (/var/www/html), 
                                          bash bin/execute.sh pwd - покажет путь к текущему каталогу, 
                                          bash bin/execute.sh mc - запустит mc (двухпанельный файловый менеджер)    
Docker -> Run -> Run Magento command      команда magento, которая работает в контейнере, например: bash bin/magento c:c - сброс кэша, если в проекте м2
Docker -> Run -> Run php script           запускает любые php-скрипты внутри контейнера, скрипты должны находиться в compose/src
Docker -> Run -> Run Grunt                запускает grunt в контейнере
Docker -> Run -> Run n98-magerun2         запуск утилиты n98-magerun2 в контейнере, 
                                          утилита включает множество полезных возможностей
Docker -> Run -> Run n98-magerun          запуск утилиты n98-magerun (для magento 1) в контейнере
Docker -> Run -> Run Redis Cli            запускает клиент redis, в нем можно, например, сбросить кэш flushall


Полезная информация

Phpmyadmin - тут http://127.0.0.1:8765/ 

Локальная почта собирается в виде .eml-файлов тут compose/sendmail/new

Версии php - 5.6 7.0 7.1 7.2

Используемый вебсервер - nginx 1.13, он же есть в связке с pagespeed В планах добавить apache.

База данных mysql 5.7 - но если нужно что-то другое - можно легко добавить, пишите мне в slack @akulakov - покажу как.

Изменение настроек mysql: При необходимости применить кастомные настройки mysql - вносить в файл compose/images/db/mysql/5.7-custom-config/conf/mysqld.cnf, 
потом делать bin/rebuild.sh

В compose/images/db/mysql/5.7-custom-config/conf/mysqld.cnf можно включить журналирование запросов, а также журнал медленных запросов - путем удаления коментариев.

  11.09.2019 
Добавлена поддержка Elasticsearch для версий с php 7.2 (2.3.1 opensource and commerce). 
Настройки в compose/yml/2.3.1/commerce/docker-compose.yml и compose/yml/2.3.1/opensource/docker-compose.yml в секции elasticsearch.

Проверка работы: bin/execute.sh bash
curl -i http://elasticsearch:9200/_cluster/health - покажет статус. Тоже самое из браузера http://localhost:9200/
Настройки magento - https://devdocs.magento.com/guides/v2.3/config-guide/elasticsearch/configure-magento.html
Данный проект находится в стадии постоянной доработки.
